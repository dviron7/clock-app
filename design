<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Classic Flip Clock</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto Mono', monospace;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-color: #000;
            color: #fff;
        }

        #clock-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            flex-wrap: wrap;
        }

        #clock {
            font-size: 10rem;
            font-weight: bold;
        }

        #controls {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 20px;
        }

        #controls select, button {
            font-family: 'Roboto Mono', monospace;
            font-size: 1.2rem;
            padding: 10px 20px;
            margin: 5px;
            background-color: #333;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background-color: #555;
        }

        #controls select {
            width: 100%;
        }

        @media (max-width: 600px) {
            #clock {
                font-size: 5rem;
            }

            button, #controls select {
                font-size: 1rem;
                padding: 8px 16px;
            }
        }
    </style>
</head>
<body>
    <div id="clock-container">
        <div id="clock">00:00</div>
        <div id="controls">
            <select id="country">
                <option value="local">Local Time</option>
            </select>
            <button id="formatToggle">Toggle 12/24 Hour</button>
            <button id="orientationToggle">Toggle Orientation</button>
            <button id="screensaverToggle">Keep Awake</button>
        </div>
    </div>

    <script>
        let is24Hour = false;
        let isHorizontal = false;

        function updateClock() {
            const clock = document.getElementById('clock');
            const selectedCountry = document.getElementById('country').value;
            let now = new Date();

            if (selectedCountry !== 'local') {
                now = new Date(now.toLocaleString('en-US', { timeZone: selectedCountry }));
            }

            let hours = now.getHours();
            const minutes = String(now.getMinutes()).padStart(2, '0');

            if (!is24Hour) {
                const ampm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12 || 12;
                clock.textContent = `${String(hours).padStart(2, '0')}:${minutes} ${ampm}`;
            } else {
                clock.textContent = `${String(hours).padStart(2, '0')}:${minutes}`;
            }
        }

        setInterval(updateClock, 1000);
        updateClock();

        // Toggle 12/24 Hour Format
        document.getElementById('formatToggle').addEventListener('click', () => {
            is24Hour = !is24Hour;
            updateClock();
        });

        // Toggle Orientation
        document.getElementById('orientationToggle').addEventListener('click', () => {
            const clockContainer = document.getElementById('clock-container');
            isHorizontal = !isHorizontal;
            clockContainer.style.flexDirection = isHorizontal ? 'row' : 'column';
        });

        // Keep Awake (Placeholder)
        document.getElementById('screensaverToggle').addEventListener('click', () => {
            alert("This feature requires additional code for 'Keep Awake'.");
        });

        // Populate Country Timezones
        async function populateCountries() {
            const countrySelect = document.getElementById('country');
            const response = await fetch('https://restcountries.com/v3.1/all');
            const countries = await response.json();

            countries.sort((a, b) => a.name.common.localeCompare(b.name.common)).forEach(country => {
                if (country.timezones && country.timezones.length > 0) {
                    const option = document.createElement('option');
                    option.value = country.timezones[0];
                    option.textContent = country.name.common;
                    countrySelect.appendChild(option);
                }
            });
        }

        populateCountries();
    </script>
</body>
</html>
